"""create_spells_table

Revision ID: 5c7e806522a8
Revises: e9c82ed44bb5
Create Date: 2025-05-27 14:48:16.811331

"""
# Path: api/alembic_migrations/versions/5c7e806522a8_create_spells_table.py
"""create_spells_table

Revision ID: 5c7e806522a8 # Use your actual new revision ID if it changed
Revises: e9c82ed44bb5
Create Date: ... 

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# Define the Enum here so it can be used by op.create_enum and op.drop_enum
schoolofmagicenum_type = postgresql.ENUM(
    'ABJURATION', 'CONJURATION', 'DIVINATION', 'ENCHANTMENT', 
    'EVOCATION', 'ILLUSION', 'NECROMANCY', 'TRANSMUTATION', 'UNIVERSAL', 
    name='schoolofmagicenum', create_type=False # create_type=False for just referencing
)

# revision identifiers, used by Alembic.
revision: str = '5c7e806522a8' # Ensure this is the correct revision ID of THIS file
down_revision: Union[str, None] = 'e9c82ed44bb5' # Points to the "items" migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - Manually Adjusted ###

    # Explicitly create the ENUM type if it doesn't exist
    # For robustness, you might want to check if the type exists first,
    # but Alembic operations on Enums usually handle this.
    # Alternatively, just op.execute("CREATE TYPE schoolofmagicenum AS ENUM (...)")
    # with a check. However, op.create_enum is cleaner.
    schoolofmagicenum_type.create(op.get_bind(), checkfirst=True) # Create if not exists

    op.create_table('spells',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column('higher_level', sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column('range', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column('components', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('material', sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column('ritual', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('duration', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column('concentration', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('casting_time', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('school', schoolofmagicenum_type, nullable=False), # Use the defined type
        sa.Column('dnd_classes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
        sa.Column('source_book', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_spells')) # Use op.f() for constraints
    )
    op.create_index(op.f('ix_spells_id'), 'spells', ['id'], unique=False)
    op.create_index(op.f('ix_spells_level'), 'spells', ['level'], unique=False)
    op.create_index(op.f('ix_spells_name'), 'spells', ['name'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - Manually Adjusted ###
    op.drop_index(op.f('ix_spells_name'), table_name='spells')
    op.drop_index(op.f('ix_spells_level'), table_name='spells')
    op.drop_index(op.f('ix_spells_id'), table_name='spells')
    op.drop_table('spells')

    # Explicitly drop the ENUM type
    schoolofmagicenum_type.drop(op.get_bind(), checkfirst=True) # Drop if exists
    # ### end Alembic commands ###