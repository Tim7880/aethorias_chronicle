"""add_is_open_for_recruitment_to_campaigns

Revision ID: 0005a73c2eed
Revises: 3ba5cbbde9cc
Create Date: 2025-05-28 14:42:49.567542

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0005a73c2eed'
down_revision: Union[str, None] = '3ba5cbbde9cc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - MANUALLY ADJUSTED ###
    op.add_column('campaigns', sa.Column('is_open_for_recruitment', sa.Boolean(), nullable=False, server_default=sa.text('false'))) # <-- ADDED server_default

    # These constraint changes are likely fine as detected by Alembic
    # if you explicitly named the constraint in your model recently.
    # Make sure the old constraint name op.f('uq_character_spells_character_id_spell_id')
    # actually exists in your database if this is not the first time running a character_spells migration.
    # If character_spells is a brand new table being created by a previous migration in this sequence that hasn't run,
    # then dropping a non-existent constraint will fail.
    #
    # Let's assume character_spells table and its original constraint exist from a prior (now successful) migration.
    # If character_spells was just created in the *previous* migration step which we fixed,
    # it might have already been created with '_character_spell_uc'.
    #
    # For safety, especially if the constraint name change is just a re-detection,
    # we can make these conditional or ensure the names are what Alembic expects.
    # However, if Alembic autogenerated this, it believes the old one exists and the new one doesn't.

    # Let's try to make the constraint drop conditional for safety if it might not exist
    # This requires getting the inspector.
    # For simplicity right now, if you are sure about the state, we can proceed.
    # If character_spells was JUST created with the _character_spell_uc name, these ops might be unnecessary or fail.
    #
    # Given you said you already implemented character spells and it's working,
    # the table character_spells should exist with the unique constraint.
    # The question is whether its current name is op.f('uq_...') or '_character_spell_uc'.
    # If it's already '_character_spell_uc', then the drop/create is redundant but harmless if it checks existence.
    # If it's op.f('uq_...'), then this change is correct.

    # Let's assume Alembic's detection is correct for the constraint name change.
    op.drop_constraint(op.f('uq_character_spells_character_id_spell_id'), 'character_spells', type_='unique')
    op.create_unique_constraint('_character_spell_uc', 'character_spells', ['character_id', 'spell_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('_character_spell_uc', 'character_spells', type_='unique')
    op.create_unique_constraint(op.f('uq_character_spells_character_id_spell_id'), 'character_spells', ['character_id', 'spell_id'], postgresql_nulls_not_distinct=False)
    op.drop_column('campaigns', 'is_open_for_recruitment')
    # ### end Alembic commands ###
