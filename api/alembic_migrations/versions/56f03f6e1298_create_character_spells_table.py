"""create_character_spells_table

Revision ID: 56f03f6e1298
Revises: 5c7e806522a8
Create Date: 2025-05-27 17:40:05.451858

"""
# Path: api/alembic_migrations/versions/56f03f6e1298_create_character_spells_table.py

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # If ENUMs or other PG types were in character_spells

# revision identifiers, used by Alembic.
revision: str = '56f03f6e1298' # Make sure this matches the file's actual revision ID
down_revision: Union[str, None] = '5c7e806522a8' # Previous migration (created spells table)
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - Manually Corrected ###
    op.create_table('character_spells',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('character_id', sa.INTEGER(), nullable=False), # autoincrement=False is default for non-PK
        sa.Column('spell_id', sa.INTEGER(), nullable=False),    # autoincrement=False is default for non-PK
        sa.Column('is_known', sa.BOOLEAN(), nullable=False),    # autoincrement=False is default for non-PK
        sa.Column('is_prepared', sa.BOOLEAN(), nullable=False), # autoincrement=False is default for non-PK
        sa.ForeignKeyConstraint(['character_id'], ['characters.id'], name=op.f('fk_character_spells_character_id_characters')), # Using op.f() for constraint names
        sa.ForeignKeyConstraint(['spell_id'], ['spells.id'], name=op.f('fk_character_spells_spell_id_spells')), # Using op.f()
        sa.PrimaryKeyConstraint('id', name=op.f('pk_character_spells')), # Using op.f()
        sa.UniqueConstraint('character_id', 'spell_id', name=op.f('uq_character_spells_character_id_spell_id')) # Using op.f()
        # Note: The 'postgresql_include=[], postgresql_nulls_not_distinct=False' from your original UniqueConstraint
        # might be specific to your autogenerate and PostgreSQL version. If op.f() doesn't generate these,
        # you can keep your original op.f('_character_spell_uc') if it worked before, or stick to simpler op.f name.
        # For clarity, I've used simpler op.f names. Adjust if needed based on what works.
    )
    op.create_index(op.f('ix_character_spells_id'), 'character_spells', ['id'], unique=False)
    op.create_index(op.f('ix_character_spells_character_id'), 'character_spells', ['character_id'], unique=False)
    op.create_index(op.f('ix_character_spells_spell_id'), 'character_spells', ['spell_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - Manually Corrected ###
    op.drop_index(op.f('ix_character_spells_spell_id'), table_name='character_spells')
    op.drop_index(op.f('ix_character_spells_character_id'), table_name='character_spells')
    op.drop_index(op.f('ix_character_spells_id'), table_name='character_spells')
    op.drop_table('character_spells')
    # ### end Alembic commands ###
